# Adapted from https://github.com/commercialhaskell/stack
language: nix
sudo: false

cache:
  directories:
  - $HOME/.ghc
  - $HOME/.cabal
  - $HOME/.stack
  - $TRAVIS_BUILD_DIR/.stack-work

matrix:
  fast_finish: true
  include:
    # Add build targets here
  - env: BUILD=stack ARGS=""
    compiler: ": #stack default"
    addons: {apt: {packages: [ libblas3,liblapack3,liblapack-dev,libblas-dev,pkg-config,libatlas-base-dev ]}}

  - env: BUILD=stack ARGS="--resolver lts-16.20 --ghc-options=-Werror"
    compiler: ": #stack 8.8.4"
    addons: {apt: {packages: [ libblas3,liblapack3,libblas-dev,liblapack-dev,pkg-config,libatlas-base-dev ]}}

  - env: BUILD=stack ARGS="--resolver lts-16.20"
    compiler: ": #stack 8.8.4"
    addons: {apt: {packages: [ libblas3,liblapack3,libblas-dev,liblapack-dev,pkg-config,libatlas-base-dev ]}}

  - env: BUILD=stack ARGS="--resolver lts-15.8"
    compiler: ": #stack 8.8.3"
    addons: {apt: {packages: [ libblas3,liblapack3,libblas-dev,liblapack-dev,pkg-config,libatlas-base-dev ]}}

  - env: BUILD=stack ARGS="--resolver lts-15.3"
    compiler: ": #stack 8.8.2"
    addons: {apt: {packages: [ libblas3,liblapack3,libblas-dev,liblapack-dev,pkg-config,libatlas-base-dev ]}}

  - env: BUILD=stack ARGS="--resolver lts-14.27"
    compiler: ": #stack 8.6.5"
    addons: {apt: {packages: [ libblas3,liblapack3,libblas-dev,liblapack-dev,pkg-config,libatlas-base-dev ]}}

  - env: BUILD=stack ARGS="--resolver nightly"
    compiler: ": #stack nightly"
    addons: {apt: {packages: [ libblas3,liblapack3,libblas-dev,liblapack-dev,pkg-config,libatlas-base-dev ]}}

  allow_failures:
  - env: BUILD=stack ARGS="--resolver nightly"
  - env: BUILD=stack ARGS="--resolver lts-14.27"
  - env: BUILD=stack ARGS="--resolver lts-16.20 --ghc-options=-Werror"

before_install:
 # Using compiler above sets CC to an invalid value, so unset it
 - unset CC

 # We want to always allow newer versions of packages when building on GHC HEAD
 - CABALARGS=""
 - if [ "x$GHCVER" = "xhead" ]; then CABALARGS=--allow-newer; fi

 # Download and unpack the stack executable
 - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$HOME/.local/bin:/opt/alex/$ALEXVER/bin:/opt/happy/$HAPPYVER/bin:$HOME/.cabal/bin:$PATH
 - mkdir -p ~/.local/bin
 - |
   if [ `uname` = "Darwin" ]
   then
     travis_retry curl --insecure -L https://get.haskellstack.org/stable/osx-x86_64.tar.gz | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
   else
     travis_retry curl -L https://get.haskellstack.org/stable/linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
   fi

   # Use the more reliable S3 mirror of Hackage
   mkdir -p $HOME/.cabal
   echo 'remote-repo: hackage.haskell.org:http://hackage.fpcomplete.com/' > $HOME/.cabal/config
   echo 'remote-repo-cache: $HOME/.cabal/packages' >> $HOME/.cabal/config

 # CUDA
 - INSTALLER=cuda-repo-${UBUNTU_VERSION}_${CUDA}_amd64.deb
 - wget http://developer.download.nvidia.com/compute/cuda/repos/${UBUNTU_VERSION}/x86_64/${INSTALLER}
 - sudo dpkg -i ${INSTALLER}
 - wget https://developer.download.nvidia.com/compute/cuda/repos/${UBUNTU_VERSION}/x86_64/7fa2af80.pub
 - sudo apt-key add 7fa2af80.pub
 - sudo apt update -qq
 - sudo apt install -y cuda-core-${CUDA_SHORT/./-} cuda-cudart-dev-${CUDA_SHORT/./-} cuda-cufft-dev-${CUDA_SHORT/./-}
 - sudo apt clean
 - CUDA_HOME=/usr/local/cuda-${CUDA_SHORT}
 - LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}
 - PATH=${CUDA_HOME}/bin:${PATH}

 # Install blas and lapack
 # - travis_retry sudo apt-get update
 # - travis_retry sudo apt-get install nvidia-cuda-toolkit
   # libblas-dev liblapack-dev

install:
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - if [ -f configure.ac ]; then autoreconf -i; fi
 - |
   stack --no-terminal --install-ghc $ARGS test --bench --only-dependencies


# script:
#  - |
#    PKG_CONFIG_PATH="${VIRTUAL_ENV}/lib/pkgconfig:${PKG_CONFIG_PATH}"
#    echo $PKG_CONFIG_PATH
#    export PKG_CONFIG_PATH
#    stack --no-terminal $ARGS test --bench --no-run-benchmarks --haddock --no-haddock-deps

script:
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - |
   set -ex
   # Run tests --ghc-options=-Werror
   # Werror on grenade only!
   stack build grenade --no-terminal $ARGS
   stack test --no-terminal $ARGS --ghc-options=-Wno-unused-imports
   stack test --no-terminal $ARGS --ghc-options=-Wno-unused-imports
   set +ex
